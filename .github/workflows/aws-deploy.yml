name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login -u AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build, tag, and push Docker image
        env:
          REGISTRY_URI: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com'
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t gallery .
          docker tag gallery $REGISTRY_URI/gallery:${{ github.run_id }}
          docker push $REGISTRY_URI/gallery:${{ github.run_id }}

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: Install Docker on EC2
        run: |
          ssh -o "StrictHostKeyChecking=no" ec2-user@${{ secrets.EC2_INSTANCE_IP }} \
          "if ! command -v docker &> /dev/null; then \
             sudo yum update -y && \
             sudo yum install docker -y && \
             sudo service docker start && \
             sudo usermod -aG docker ec2-user; \
           fi"

      - name: Generate Env
        run: |
          echo ${{ secrets.ENV_VARS }} > .env

      - name: Deploy to EC2
        env:
          REGISTRY_REPO: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/gallery:${{ github.run_id }}'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ssh -o "StrictHostKeyChecking=no" ec2-user@${{ secrets.EC2_INSTANCE_IP }} \
          "docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com && \
           docker pull $REGISTRY_REPO && \
           docker stop gallery || true && \
           docker rm gallery || true && \
           docker run -d -p 3000:3000 --name gallery --env-file .env $REGISTRY_REPO && \
           docker image prune -af"

      #  optional
      - name: Clean up ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          ssh -o "StrictHostKeyChecking=no" ec2-user@${{ secrets.EC2_INSTANCE_IP }} "
          # Получаем список неиспользуемых образов и удаляем их
          IMAGE_IDS=\$(aws ecr list-images --repository-name gallery --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json)
          if [ "\$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image --repository-name gallery --image-ids \$IMAGE_IDS
          fi
          "
